# app_multi.py ‚Äî R√©servations (MULTI-APPARTEMENTS)
# - Colonne "appartement" + filtre appliqu√© √† TOUS les onglets
# - Calculs et KPI identiques √† la version stable simple
# - Calendrier, Rapport, Liste clients, SMS, Export ICS
# - Sauvegarde/restauration XLSX, t√©l√©phone en texte
# -------------------------------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import calendar
from datetime import date, timedelta, datetime, timezone
from io import BytesIO
import hashlib
import os
from urllib.parse import quote

FICHIER = "reservations_multi.xlsx"   # <- nom du fichier multi

# =============== Maintenance / Cache =================

def render_cache_section_sidebar():
    st.sidebar.markdown("---")
    st.sidebar.markdown("## üß∞ Maintenance")
    if st.sidebar.button("‚ôªÔ∏è Vider le cache et relancer"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        try:
            st.cache_resource.clear()
        except Exception:
            pass
        st.sidebar.success("Cache vid√©. Red√©marrage‚Ä¶")
        st.rerun()

# =============== Outils ==============================

def to_date_only(x):
    if pd.isna(x) or x is None:
        return None
    try:
        return pd.to_datetime(x).date()
    except Exception:
        return None

def format_date_str(d):
    return d.strftime("%Y/%m/%d") if isinstance(d, date) else ""

def normalize_tel(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return ""
    s = str(x).strip().replace(" ", "")
    if s.endswith(".0"):
        s = s[:-2]
    return s

PLATFORM_ICONS = {"Booking": "üü¶", "Airbnb": "üü©", "Autre": "üüß"}

# =============== Sch√©ma & calculs ====================

BASE_COLS = [
    "appartement",                      # <- NOUVEAU
    "nom_client","plateforme","telephone",
    "date_arrivee","date_depart","nuitees",
    "prix_brut","commissions","frais_cb","prix_net",
    "menage","taxes_sejour","base",
    "charges","%","AAAA","MM","ical_uid"
]

def ensure_schema(df: pd.DataFrame) -> pd.DataFrame:
    if df is None:
        df = pd.DataFrame()
    df = df.copy()

    # Colonnes minimales
    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = np.nan

    # D√©fauts texte
    df["appartement"] = df["appartement"].fillna("G√©n√©ral")  # d√©faut
    df["nom_client"]  = df["nom_client"].fillna("")
    df["plateforme"]  = df["plateforme"].fillna("Autre")
    df["ical_uid"]    = df["ical_uid"].fillna("")

    # Dates
    for c in ["date_arrivee", "date_depart"]:
        df[c] = df[c].apply(to_date_only)

    # T√©l√©phone
    df["telephone"] = df["telephone"].apply(normalize_tel)

    # Num√©riques
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","nuitees"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")

    # Nuit√©es
    df["nuitees"] = [
        (d2 - d1).days if (isinstance(d1, date) and isinstance(d2, date)) else np.nan
        for d1, d2 in zip(df["date_arrivee"], df["date_depart"])
    ]

    # AAAA/MM
    df["AAAA"] = df["date_arrivee"].apply(lambda d: d.year if isinstance(d, date) else np.nan).astype("Int64")
    df["MM"]   = df["date_arrivee"].apply(lambda d: d.month if isinstance(d, date) else np.nan).astype("Int64")

    # Remplir NaN -> 0 pour calculs
    for c in ["prix_brut","commissions","frais_cb","menage","taxes_sejour"]:
        df[c] = df[c].fillna(0.0)

    # Calculs officiels :
    # prix_net = prix_brut - commissions - frais_cb
    # base     = prix_net - menage - taxes_sejour
    # charges  = prix_brut - prix_net
    # %        = (charges / prix_brut) * 100
    df["prix_net"] = (df["prix_brut"] - df["commissions"] - df["frais_cb"]).clip(lower=0)
    df["base"]     = (df["prix_net"] - df["menage"] - df["taxes_sejour"]).clip(lower=0)
    df["charges"]  = (df["prix_brut"] - df["prix_net"]).clip(lower=0)
    with pd.option_context("mode.use_inf_as_na", True):
        df["%"] = (df["charges"] / df["prix_brut"] * 100).fillna(0)

    # Arrondis
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"]:
        df[c] = df[c].round(2)

    return df[[c for c in BASE_COLS if c in df.columns] + [c for c in df.columns if c not in BASE_COLS]]

def is_total_row(row: pd.Series) -> bool:
    name_is_total = str(row.get("nom_client","")).strip().lower() == "total"
    pf_is_total   = str(row.get("plateforme","")).strip().lower() == "total"
    d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
    no_dates = not isinstance(d1, date) and not isinstance(d2, date)
    has_money = any(pd.notna(row.get(c)) and float(row.get(c) or 0) != 0
                    for c in ["prix_brut","prix_net","base","charges"])
    return name_is_total or pf_is_total or (no_dates and has_money)

def split_totals(df: pd.DataFrame):
    if df is None or df.empty:
        return df, df
    mask = df.apply(is_total_row, axis=1)
    return df[~mask].copy(), df[mask].copy()

def sort_core(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    by = [c for c in ["appartement","date_arrivee","nom_client"] if c in df.columns]
    return df.sort_values(by=by, na_position="last").reset_index(drop=True)

# =============== Excel I/O ===========================

@st.cache_data(show_spinner=False)
def _read_excel_cached(path: str, mtime: float):
    return pd.read_excel(path, converters={"telephone": normalize_tel, "appartement": str})

def charger_donnees() -> pd.DataFrame:
    if not os.path.exists(FICHIER):
        return ensure_schema(pd.DataFrame())
    try:
        mtime = os.path.getmtime(FICHIER)
        df = _read_excel_cached(FICHIER, mtime)
        return ensure_schema(df)
    except Exception as e:
        st.error(f"Erreur de lecture Excel : {e}")
        return ensure_schema(pd.DataFrame())

def _force_telephone_text_format_openpyxl(writer, df_to_save: pd.DataFrame, sheet_name: str):
    try:
        ws = writer.sheets.get(sheet_name) or writer.sheets.get('Sheet1', None)
        if ws is None or "telephone" not in df_to_save.columns:
            return
        col_idx = df_to_save.columns.get_loc("telephone") + 1
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=col_idx, max_col=col_idx):
            row[0].number_format = '@'
    except Exception:
        pass

def sauvegarder_donnees(df: pd.DataFrame):
    df = ensure_schema(df)
    core, totals = split_totals(df)
    core = sort_core(core)
    out = pd.concat([core, totals], ignore_index=True)
    try:
        with pd.ExcelWriter(FICHIER, engine="openpyxl") as w:
            out.to_excel(w, index=False, sheet_name="Sheet1")
            _force_telephone_text_format_openpyxl(w, out, "Sheet1")
        st.cache_data.clear()
        st.success("üíæ Sauvegarde Excel effectu√©e.")
    except Exception as e:
        st.error(f"√âchec de sauvegarde Excel : {e}")

def bouton_restaurer():
    up = st.sidebar.file_uploader("üì§ Restauration xlsx", type=["xlsx"], help="Remplace le fichier actuel")
    if up is not None:
        try:
            df_new = pd.read_excel(up, converters={"telephone": normalize_tel, "appartement": str})
            df_new = ensure_schema(df_new)
            sauvegarder_donnees(df_new)
            st.sidebar.success("‚úÖ Fichier restaur√©.")
            st.rerun()
        except Exception as e:
            st.sidebar.error(f"Erreur import: {e}")

def bouton_telecharger(df: pd.DataFrame):
    buf = BytesIO()
    try:
        ensure_schema(df).to_excel(buf, index=False, engine="openpyxl")
        data_xlsx = buf.getvalue()
    except Exception as e:
        st.sidebar.error(f"Export XLSX indisponible : {e}")
        data_xlsx = None
    st.sidebar.download_button(
        "üíæ Sauvegarde xlsx",
        data=data_xlsx if data_xlsx else b"",
        file_name=FICHIER,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        disabled=(data_xlsx is None),
    )

# =============== ICS Export ==========================

def _ics_escape(text: str) -> str:
    if text is None:
        return ""
    s = str(text).replace("\\", "\\\\").replace(";", "\\;").replace(",", "\\,").replace("\n", "\\n")
    return s

def _fmt_date_ics(d: date) -> str:
    return d.strftime("%Y%m%d")

def _dtstamp_utc_now() -> str:
    return datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")

def _stable_uid(nom_client, plateforme, d1, d2, tel, appart, salt="v1"):
    base = f"{appart}|{nom_client}|{plateforme}|{d1}|{d2}|{tel}|{salt}"
    h = hashlib.sha1(base.encode("utf-8")).hexdigest()
    return f"vt-{h}@villatobias"

def df_to_ics(df: pd.DataFrame, cal_name: str = "R√©servations") -> str:
    df = ensure_schema(df)
    if df.empty:
        return (
            "BEGIN:VCALENDAR\r\n"
            "VERSION:2.0\r\n"
            "PRODID:-//Reservations//FR\r\n"
            f"X-WR-CALNAME:{_ics_escape(cal_name)}\r\n"
            "CALSCALE:GREGORIAN\r\n"
            "METHOD:PUBLISH\r\n"
            "END:VCALENDAR\r\n"
        )
    core, _ = split_totals(df)
    core = sort_core(core)

    lines = []
    A = lines.append
    A("BEGIN:VCALENDAR")
    A("VERSION:2.0")
    A("PRODID:-//Reservations//FR")
    A(f"X-WR-CALNAME:{_ics_escape(cal_name)}")
    A("CALSCALE:GREGORIAN")
    A("METHOD:PUBLISH")

    for _, row in core.iterrows():
        d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        plateforme = str(row.get("plateforme") or "").strip()
        nom_client = str(row.get("nom_client") or "").strip()
        tel = str(row.get("telephone") or "").strip()
        appart = str(row.get("appartement") or "").strip()
        # -> R√©sum√© inclut l'appartement
        summary = " - ".join([x for x in [appart, plateforme, nom_client, tel] if x])
        brut = float(row.get("prix_brut") or 0)
        net  = float(row.get("prix_net")  or 0)
        nuitees = int(row.get("nuitees") or ((d2 - d1).days))

        desc = (
            f"Appartement: {appart}\\nPlateforme: {plateforme}\\n"
            f"Client: {nom_client}\\nT√©l√©phone: {tel}\\n"
            f"Arrivee: {d1.strftime('%Y/%m/%d')}\\nDepart: {d2.strftime('%Y/%m/%d')}\\n"
            f"Nuitees: {nuitees}\\nBrut: {brut:.2f} ‚Ç¨\\nNet: {net:.2f} ‚Ç¨"
        )

        uid_existing = str(row.get("ical_uid") or "").strip()
        uid = uid_existing if uid_existing else _stable_uid(nom_client, plateforme, d1, d2, tel, appart, salt="v1")

        A("BEGIN:VEVENT")
        A(f"UID:{_ics_escape(uid)}")
        A(f"DTSTAMP:{_dtstamp_utc_now()}")
        A(f"DTSTART;VALUE=DATE:{_fmt_date_ics(d1)}")
        A(f"DTEND;VALUE=DATE:{_fmt_date_ics(d2)}")
        A(f"SUMMARY:{_ics_escape(summary)}")
        A(f"DESCRIPTION:{_ics_escape(desc)}")
        A("END:VEVENT")

    A("END:VCALENDAR")
    return "\r\n".join(lines) + "\r\n"

# =============== Templates SMS (signatures retir√©es) =

def sms_message_arrivee(row: pd.Series) -> str:
    d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
    d1s = d1.strftime("%Y/%m/%d") if isinstance(d1, date) else ""
    d2s = d2.strftime("%Y/%m/%d") if isinstance(d2, date) else ""
    nuitees = int(row.get("nuitees") or ((d2 - d1).days if isinstance(d1, date) and isinstance(d2, date) else 0))
    plateforme = str(row.get("plateforme") or "")
    nom = str(row.get("nom_client") or "")
    tel_aff = str(row.get("telephone") or "").strip()
    appart = str(row.get("appartement") or "").strip()

    # En-t√™te = appartement, signature retir√©e
    return (
        f"{appart}\n"
        f"Plateforme : {plateforme}\n"
        f"Date d'arrivee : {d1s}  Date depart : {d2s}  Nombre de nuitees : {nuitees}\n\n"
        f"Bonjour {nom}\n"
        f"Telephone : {tel_aff}\n\n"
        "Bienvenue chez nous !\n\n"
        "Nous sommes ravis de vous accueillir bientot. Pour organiser au mieux votre reception, "
        "pourriez-vous nous indiquer a quelle heure vous pensez arriver.\n\n"
        "Sachez egalement qu'une place de parking est a votre disposition.\n\n"
        "Excellent voyage et a tres bientot."
    )

def sms_message_depart(row: pd.Series) -> str:
    nom = str(row.get("nom_client") or "")
    # Signature retir√©e √©galement
    return (
        f"Bonjour {nom},\n\n"
        "Un grand merci d‚Äôavoir choisi notre appartement pour votre s√©jour ! "
        "Nous esp√©rons que vous avez pass√© un moment agr√©able.\n\n"
        "Au plaisir de vous accueillir √† nouveau."
    )

# =============== UI helpers ==========================

def kpi_chips(df: pd.DataFrame):
    core, _ = split_totals(df)
    if core.empty:
        return
    total_brut = core["prix_brut"].sum()
    total_comm = core["commissions"].sum()
    total_cb   = core["frais_cb"].sum()
    total_ch   = total_comm + total_cb          # ‚Üê Charges = commissions + frais CB
    total_net  = core["prix_net"].sum()
    total_base = core["base"].sum()
    total_nuit = core["nuitees"].sum()
    pct_moy    = (total_ch / total_brut * 100) if total_brut else 0
    pm_nuit    = (total_brut / total_nuit) if total_nuit else 0

    html = f"""
    <style>
    .chips-wrap {{ display:flex; flex-wrap:wrap; gap:8px; margin:6px 0 10px 0; }}
    .chip {{ padding:8px 10px; border-radius:10px; background: rgba(127,127,127,0.12);
             border: 1px solid rgba(127,127,127,0.25); font-size:0.9rem; }}
    .chip b {{ display:block; margin-bottom:3px; font-size:0.85rem; opacity:0.8; }}
    .chip .v {{ font-weight:600; }}
    </style>
    <div class="chips-wrap">
      <div class="chip"><b>Total Brut</b><div class="v">{total_brut:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Net</b><div class="v">{total_net:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Base</b><div class="v">{total_base:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Charges</b><div class="v">{total_ch:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Nuit√©es</b><div class="v">{int(total_nuit) if pd.notna(total_nuit) else 0}</div></div>
      <div class="chip"><b>Commission moy.</b><div class="v">{pct_moy:.2f} %</div></div>
      <div class="chip"><b>Prix moyen/nuit</b><div class="v">{pm_nuit:,.2f} ‚Ç¨</div></div>
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)

def search_box(df: pd.DataFrame) -> pd.DataFrame:
    q = st.text_input("üîé Recherche (appartement, nom, plateforme, t√©l√©phone‚Ä¶)", "")
    if not q:
        return df
    ql = q.strip().lower()
    def _match(v):
        s = "" if pd.isna(v) else str(v)
        return ql in s.lower()
    mask = (
        df["appartement"].apply(_match) |
        df["nom_client"].apply(_match) |
        df["plateforme"].apply(_match) |
        df["telephone"].apply(_match)
    )
    return df[mask].copy()

def filtre_appartement(df: pd.DataFrame, key="global_appart"):
    apps = ["Tous"] + sorted([a for a in df["appartement"].dropna().unique().tolist() if str(a).strip() != ""])
    choix = st.selectbox("Appartement", apps, key=key)
    if choix != "Tous":
        return df[df["appartement"] == choix].copy(), choix
    return df.copy(), None

# =============== VUES ================================

def vue_reservations(df: pd.DataFrame):
    st.title("üìã R√©servations")
    with st.expander("üéõÔ∏è Options d‚Äôaffichage", expanded=True):
        show_kpi = st.checkbox("Afficher les totaux (KPI)", value=True)
        enable_search = st.checkbox("Activer la recherche", value=True)

    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="res_app")

    if show_kpi:
        kpi_chips(df)
    if enable_search:
        df = search_box(df)

    core, totals = split_totals(df)
    core = sort_core(core)
    show = pd.concat([core, totals], ignore_index=True)
    for c in ["date_arrivee","date_depart"]:
        show[c] = show[c].apply(format_date_str)

    cols = ["appartement","nom_client","plateforme","telephone","date_arrivee","date_depart","nuitees",
            "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","AAAA","MM"]
    cols = [c for c in cols if c in show.columns]
    st.dataframe(show[cols], use_container_width=True)

def vue_ajouter(df: pd.DataFrame):
    st.title("‚ûï Ajouter une r√©servation")
    st.caption("Saisie compacte (libell√©s inline)")

    def inline_input(label, widget_fn, key=None, **widget_kwargs):
        col1, col2 = st.columns([1,2])
        with col1: st.markdown(f"**{label}**")
        with col2: return widget_fn(label, key=key, label_visibility="collapsed", **widget_kwargs)

    appart = inline_input("Appartement", st.text_input, key="add_appart", value="G√©n√©ral")
    nom = inline_input("Nom", st.text_input, key="add_nom", value="")
    tel = inline_input("T√©l√©phone (+33...)", st.text_input, key="add_tel", value="")
    plateforme = inline_input("Plateforme", st.selectbox, key="add_pf",
                              options=["Booking","Airbnb","Autre"], index=0)

    arrivee = inline_input("Arriv√©e", st.date_input, key="add_arrivee", value=date.today())
    min_dep = arrivee + timedelta(days=1)
    depart  = inline_input("D√©part",  st.date_input, key="add_depart",
                           value=min_dep, min_value=min_dep)

    brut = inline_input("Prix brut (‚Ç¨)", st.number_input, key="add_brut",
                        min_value=0.0, step=1.0, format="%.2f")
    commissions = inline_input("Commissions (‚Ç¨)", st.number_input, key="add_comm",
                               min_value=0.0, step=1.0, format="%.2f")
    frais_cb = inline_input("Frais CB (‚Ç¨)", st.number_input, key="add_cb",
                            min_value=0.0, step=1.0, format="%.2f")

    net_calc = max(float(brut) - float(commissions) - float(frais_cb), 0.0)
    inline_input("Prix net (calcul√©)", st.number_input, key="add_net",
                 value=round(net_calc,2), step=0.01, format="%.2f", disabled=True)

    menage = inline_input("M√©nage (‚Ç¨)", st.number_input, key="add_menage",
                          min_value=0.0, step=1.0, format="%.2f")
    taxes  = inline_input("Taxes s√©jour (‚Ç¨)", st.number_input, key="add_taxes",
                          min_value=0.0, step=1.0, format="%.2f")

    base_calc    = max(net_calc - float(menage) - float(taxes), 0.0)
    charges_calc = max(float(brut) - net_calc, 0.0)
    pct_calc     = (charges_calc / float(brut) * 100) if float(brut) > 0 else 0.0

    inline_input("Base (calcul√©e)", st.number_input, key="add_base",
                 value=round(base_calc,2), step=0.01, format="%.2f", disabled=True)
    inline_input("Commission (%)", st.number_input, key="add_pct",
                 value=round(pct_calc,2), step=0.01, format="%.2f", disabled=True)

    if st.button("Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        ligne = {
            "appartement": (appart or "G√©n√©ral").strip(),
            "nom_client": (nom or "").strip(),
            "plateforme": plateforme,
            "telephone": normalize_tel(tel),
            "date_arrivee": arrivee,
            "date_depart": depart,
            "prix_brut": float(brut),
            "commissions": float(commissions),
            "frais_cb": float(frais_cb),
            "prix_net": round(net_calc, 2),
            "menage": float(menage),
            "taxes_sejour": float(taxes),
            "base": round(base_calc, 2),
            "charges": round(charges_calc, 2),
            "%": round(pct_calc, 2),
            "nuitees": (depart - arrivee).days,
            "AAAA": arrivee.year,
            "MM": arrivee.month,
            "ical_uid": ""
        }
        df2 = pd.concat([df, pd.DataFrame([ligne])], ignore_index=True)
        sauvegarder_donnees(df2)
        st.success("‚úÖ R√©servation enregistr√©e")
        st.rerun()

def vue_modifier(df: pd.DataFrame):
    st.title("‚úèÔ∏è Modifier / Supprimer")
    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="mod_app")
    if df.empty:
        st.info("Aucune r√©servation.")
        return

    df["identifiant"] = df["appartement"].astype(str) + " | " + df["nom_client"].astype(str) + " | " + df["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df["identifiant"])
    idx = df.index[df["identifiant"] == choix]
    if len(idx) == 0:
        st.warning("S√©lection invalide.")
        return
    i = idx[0]

    c0, c1 = st.columns(2)
    appart = c0.text_input("Appartement", df.at[i, "appartement"])
    plateforme = c1.selectbox("Plateforme", ["Booking","Airbnb","Autre"],
                              index = ["Booking","Airbnb","Autre"].index(df.at[i,"plateforme"]) if df.at[i,"plateforme"] in ["Booking","Airbnb","Autre"] else 2)

    c2, c3 = st.columns(2)
    nom = c2.text_input("Nom", df.at[i, "nom_client"])
    tel = c3.text_input("T√©l√©phone", normalize_tel(df.at[i, "telephone"]))

    arrivee = st.date_input("Arriv√©e", df.at[i,"date_arrivee"] if isinstance(df.at[i,"date_arrivee"], date) else date.today())
    depart  = st.date_input("D√©part",  df.at[i,"date_depart"] if isinstance(df.at[i,"date_depart"], date) else arrivee + timedelta(days=1), min_value=arrivee+timedelta(days=1))

    r1, r2, r3 = st.columns(3)
    brut = r1.number_input("Prix brut (‚Ç¨)", min_value=0.0, value=float(df.at[i,"prix_brut"]) if pd.notna(df.at[i,"prix_brut"]) else 0.0, step=1.0, format="%.2f")
    commissions = r2.number_input("Commissions (‚Ç¨)", min_value=0.0, value=float(df.at[i,"commissions"]) if pd.notna(df.at[i,"commissions"]) else 0.0, step=1.0, format="%.2f")
    frais_cb = r3.number_input("Frais CB (‚Ç¨)", min_value=0.0, value=float(df.at[i,"frais_cb"]) if pd.notna(df.at[i,"frais_cb"]) else 0.0, step=1.0, format="%.2f")

    net_calc = max(brut - commissions - frais_cb, 0.0)

    r4, r5, r6 = st.columns(3)
    menage = r4.number_input("M√©nage (‚Ç¨)", min_value=0.0, value=float(df.at[i,"menage"]) if pd.notna(df.at[i,"menage"]) else 0.0, step=1.0, format="%.2f")
    taxes  = r5.number_input("Taxes s√©jour (‚Ç¨)", min_value=0.0, value=float(df.at[i,"taxes_sejour"]) if pd.notna(df.at[i,"taxes_sejour"]) else 0.0, step=1.0, format="%.2f")
    base_calc = max(net_calc - menage - taxes, 0.0)

    charges_calc = max(brut - net_calc, 0.0)
    pct_calc = (charges_calc / brut * 100) if brut > 0 else 0.0
    r6.markdown(f"**Net (calc)**: {net_calc:.2f} ‚Ç¨  \n**Base (calc)**: {base_calc:.2f} ‚Ç¨  \n**%**: {pct_calc:.2f}")

    c_save, c_del = st.columns(2)
    if c_save.button("üíæ Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        df.at[i,"appartement"] = (appart or "G√©n√©ral").strip()
        df.at[i,"nom_client"]  = nom.strip()
        df.at[i,"plateforme"]  = plateforme
        df.at[i,"telephone"]   = normalize_tel(tel)
        df.at[i,"date_arrivee"] = arrivee
        df.at[i,"date_depart"]  = depart
        df.at[i,"prix_brut"]    = float(brut)
        df.at[i,"commissions"]  = float(commissions)
        df.at[i,"frais_cb"]     = float(frais_cb)
        df.at[i,"prix_net"]     = round(net_calc, 2)
        df.at[i,"menage"]       = float(menage)
        df.at[i,"taxes_sejour"] = float(taxes)
        df.at[i,"base"]         = round(base_calc, 2)
        df.at[i,"charges"]      = round(charges_calc, 2)
        df.at[i,"%"]            = round(pct_calc, 2)
        df.at[i,"nuitees"]      = (depart - arrivee).days
        df.at[i,"AAAA"]         = arrivee.year
        df.at[i,"MM"]           = arrivee.month
        df.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df)
        st.success("‚úÖ Modifi√©")
        st.rerun()

    if c_del.button("üóë Supprimer"):
        df2 = df.drop(index=i)
        df2.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df2)
        st.warning("Supprim√©.")
        st.rerun()

def vue_calendrier(df: pd.DataFrame):
    st.title("üìÖ Calendrier mensuel")
    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="cal_app")
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    cols = st.columns(2)
    mois_nom = cols[0].selectbox("Mois", list(calendar.month_name)[1:], index=max(0, date.today().month-1))
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.warning("Aucune ann√©e disponible.")
        return
    annee = cols[1].selectbox("Ann√©e", annees, index=len(annees)-1)

    mois_index = list(calendar.month_name).index(mois_nom)
    nb_jours = calendar.monthrange(annee, mois_index)[1]
    jours = [date(annee, mois_index, j+1) for j in range(nb_jours)]
    planning = {j: [] for j in jours}

    core, _ = split_totals(df)
    for _, row in core.iterrows():
        d1 = row["date_arrivee"]; d2 = row["date_depart"]
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        ic = PLATFORM_ICONS.get(row["plateforme"], "‚¨ú")
        nom = str(row["nom_client"])
        for j in jours:
            if d1 <= j < d2:
                planning[j].append(f"{ic} {nom}")

    headers = ["Lun","Mar","Mer","Jeu","Ven","Sam","Dim"]
    grille = []
    for semaine in calendar.monthcalendar(annee, mois_index):
        ligne = []
        for jour in semaine:
            if jour == 0:
                ligne.append("")
            else:
                d = date(annee, mois_index, jour)
                contenu = f"{jour}\n" + "\n".join(planning.get(d, []))
                ligne.append(contenu)
        grille.append(ligne)

    st.table(pd.DataFrame(grille, columns=headers))

def vue_rapport(df: pd.DataFrame):
    st.title("üìä Rapport (d√©taill√©)")
    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="rep_app")
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.info("Aucune ann√©e disponible.")
        return

    c1, c2, c3 = st.columns(3)
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1, key="rapport_annee")
    pf_opt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf = c2.selectbox("Plateforme", pf_opt, key="rapport_pf")
    mois_opt = ["Tous"] + [f"{i:02d}" for i in range(1,13)]
    mois_label = c3.selectbox("Mois", mois_opt, key="rapport_mois")

    data = df[df["AAAA"] == int(annee)].copy()
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]
    if mois_label != "Tous":
        data = data[data["MM"] == int(mois_label)]

    if data.empty:
        st.info("Aucune donn√©e pour ces filtres.")
        return

    detail = data.copy()
    for c in ["date_arrivee","date_depart"]:
        detail[c] = detail[c].apply(format_date_str)
    by = [c for c in ["appartement","date_arrivee","nom_client"] if c in detail.columns]
    if by:
        detail = detail.sort_values(by=by, na_position="last").reset_index(drop=True)

    cols_detail = [
        "appartement","nom_client","plateforme","telephone",
        "date_arrivee","date_depart","nuitees",
        "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"
    ]
    cols_detail = [c for c in cols_detail if c in detail.columns]
    st.dataframe(detail[cols_detail], use_container_width=True)

    # KPI sur le sous-ensemble filtr√©
    core, _ = split_totals(data)
    kpi_chips(core)

    # Agr√©gations par MM x plateforme
    stats = (
        data.groupby(["MM","plateforme"], dropna=True)
            .agg(prix_brut=("prix_brut","sum"),
                 prix_net=("prix_net","sum"),
                 base=("base","sum"),
                 charges=("charges","sum"),
                 nuitees=("nuitees","sum"))
            .reset_index()
    )
    stats = stats.sort_values(["MM","plateforme"]).reset_index(drop=True)

    def bar_chart_metric(metric_label, metric_col):
        if stats.empty: return
        pvt = stats.pivot(index="MM", columns="plateforme", values=metric_col).fillna(0).sort_index()
        pvt.index = [f"{int(m):02d}" for m in pvt.index]
        st.markdown(f"**{metric_label}**")
        st.bar_chart(pvt)

    bar_chart_metric("Revenus bruts", "prix_brut")
    bar_chart_metric("Revenus nets", "prix_net")
    bar_chart_metric("Base", "base")
    bar_chart_metric("Nuit√©es", "nuitees")

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        detail[cols_detail].to_excel(writer, index=False)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger le d√©tail (XLSX)",
        data=buf.getvalue(),
        file_name=f"rapport_detail_{annee}{'' if mois_label=='Tous' else '_'+mois_label}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

def vue_clients(df: pd.DataFrame):
    st.title("üë• Liste des clients")
    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="cli_app")
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    c1, c2 = st.columns(2)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1) if annees else None
    mois  = c2.selectbox("Mois", ["Tous"] + [f"{i:02d}" for i in range(1,13)])

    data = df.copy()
    if annee: data = data[data["AAAA"] == int(annee)]
    if mois != "Tous": data = data[data["MM"] == int(mois)]
    if data.empty:
        st.info("Aucune donn√©e pour cette p√©riode.")
        return

    data["prix_brut/nuit"] = data.apply(lambda r: round((r["prix_brut"]/r["nuitees"]) if r["nuitees"] else 0,2), axis=1)
    data["prix_net/nuit"]  = data.apply(lambda r: round((r["prix_net"]/r["nuitees"])  if r["nuitees"] else 0,2), axis=1)

    show = data.copy()
    for c in ["date_arrivee","date_depart"]:
        show[c] = show[c].apply(format_date_str)

    cols = ["appartement","nom_client","plateforme","telephone","date_arrivee","date_depart",
            "nuitees","prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour",
            "base","charges","%","prix_brut/nuit","prix_net/nuit"]
    cols = [c for c in cols if c in show.columns]
    st.dataframe(show[cols], use_container_width=True)
    st.download_button(
        "üì• T√©l√©charger (CSV)",
        data=show[cols].to_csv(index=False).encode("utf-8"),
        file_name="liste_clients.csv",
        mime="text/csv"
    )

def vue_export_ics(df: pd.DataFrame):
    st.title("üì§ Export ICS (Google Agenda ‚Äì Import manuel)")
    df = ensure_schema(df)
    df, appart_sel = filtre_appartement(df, key="ics_app")
    if df.empty:
        st.info("Aucune donn√©e √† exporter.")
        return

    c1, c2, c3 = st.columns(3)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", ["Toutes"] + annees, index=len(annees)) if annees else "Toutes"
    mois  = c2.selectbox("Mois", ["Tous"] + list(range(1,13)))
    pfopt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf    = c3.selectbox("Plateforme", pfopt)

    data = df.copy()
    if annee != "Toutes": data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":    data = data[data["MM"] == int(mois)]
    if pf != "Toutes":    data = data[data["plateforme"] == pf]

    if data.empty:
        st.info("Aucune r√©servation pour ces filtres.")
        return

    cal_name = f"R√©servations {appart_sel}" if appart_sel else "R√©servations"
    ics_text = df_to_ics(data, cal_name=cal_name)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger reservations.ics",
        data=ics_text.encode("utf-8"),
        file_name=f"reservations{('_'+appart_sel) if appart_sel else ''}.ics",
        mime="text/calendar"
    )
    st.caption("Dans Google Agenda : Param√®tres ‚Üí Importer & exporter ‚Üí Importer ‚Üí s√©lectionnez ce fichier .ics.")

def vue_sms(df: pd.DataFrame):
    st.title("‚úâÔ∏è SMS (envoi manuel)")
    df = ensure_schema(df)
    df, _ = filtre_appartement(df, key="sms_app")
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    today = date.today()
    demain = today + timedelta(days=1)
    hier = today - timedelta(days=1)

    colA, colB = st.columns(2)

    with colA:
        st.subheader("üìÜ Arriv√©es demain")
        arrives = df[df["date_arrivee"] == demain].copy()
        if arrives.empty:
            st.info("Aucune arriv√©e demain.")
        else:
            for idx, r in arrives.reset_index(drop=True).iterrows():
                body = sms_message_arrivee(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')} ‚Äî *{r.get('appartement','')}*")
                st.markdown(f"Arriv√©e: {format_date_str(r.get('date_arrivee'))} ‚Ä¢ "
                            f"D√©part: {format_date_str(r.get('date_depart'))} ‚Ä¢ "
                            f"Nuit√©es: {r.get('nuitees','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    with colB:
        st.subheader("üïí Relance +24h apr√®s d√©part")
        dep_24h = df[df["date_depart"] == hier].copy()
        if dep_24h.empty:
            st.info("Aucun d√©part hier.")
        else:
            for idx, r in dep_24h.reset_index(drop=True).iterrows():
                body = sms_message_depart(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')} ‚Äî *{r.get('appartement','')}*")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    st.subheader("‚úçÔ∏è Composer un SMS manuel")
    df_pick = df.copy()
    df_pick["id_aff"] = (
        df_pick["appartement"].astype(str) + " | " +
        df_pick["nom_client"].astype(str) + " | " +
        df_pick["plateforme"].astype(str) + " | " +
        df_pick["date_arrivee"].apply(format_date_str)
    )
    choix = st.selectbox("Choisir une r√©servation", df_pick["id_aff"])
    r = df_pick.loc[df_pick["id_aff"] == choix].iloc[0]
    tel = normalize_tel(r.get("telephone"))

    choix_type = st.radio("Mod√®le de message",
                          ["Arriv√©e (demande d‚Äôheure)","Relance apr√®s d√©part","Message libre"],
                          horizontal=True)
    if choix_type == "Arriv√©e (demande d‚Äôheure)":
        body = sms_message_arrivee(r)
    elif choix_type == "Relance apr√®s d√©part":
        body = sms_message_depart(r)
    else:
        body = st.text_area("Votre message", value="", height=160, placeholder="Tapez votre SMS ici‚Ä¶")

    c1, c2 = st.columns(2)
    with c1:
        st.code(body or "‚Äî")
    if tel and body:
        c1, c2 = st.columns(2)
        c1.link_button(f"üìû Appeler {tel}", f"tel:{tel}")
        c2.link_button("üì© Envoyer SMS", f"sms:{tel}?&body={quote(body)}")
    else:
        st.info("Renseignez un t√©l√©phone et un message.")

# =============== APP =================================

def main():
    st.set_page_config(page_title="üè† R√©servations (Multi-appartements)", layout="wide")

    st.sidebar.title("üìÅ Fichier")
    df_tmp = charger_donnees()
    bouton_telecharger(df_tmp)
    bouton_restaurer()

    st.sidebar.title("üß≠ Navigation")
    onglet = st.sidebar.radio(
        "Aller √†",
        ["üìã R√©servations","‚ûï Ajouter","‚úèÔ∏è Modifier / Supprimer",
         "üìÖ Calendrier","üìä Rapport","üë• Liste clients","üì§ Export ICS","‚úâÔ∏è SMS"]
    )

    render_cache_section_sidebar()

    df = charger_donnees()

    if onglet == "üìã R√©servations":
        vue_reservations(df)
    elif onglet == "‚ûï Ajouter":
        vue_ajouter(df)
    elif onglet == "‚úèÔ∏è Modifier / Supprimer":
        vue_modifier(df)
    elif onglet == "üìÖ Calendrier":
        vue_calendrier(df)
    elif onglet == "üìä Rapport":
        vue_rapport(df)
    elif onglet == "üë• Liste clients":
        vue_clients(df)
    elif onglet == "üì§ Export ICS":
        vue_export_ics(df)
    elif onglet == "‚úâÔ∏è SMS":
        vue_sms(df)

if __name__ == "__main__":
    main()